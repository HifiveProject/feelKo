plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.google.cloud.tools.jib' version '3.4.0'
}

group = 'com.ll'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
    mavenCentral()
}

dependencies {
    //oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    //thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.2.1'
    //validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //Querydsl 설정
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor"com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // hypersistence-utils
    implementation group: 'io.hypersistence', name: 'hypersistence-utils-hibernate-63', version: '3.7.0'

    //devtools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //h2
    runtimeOnly 'com.h2database:h2'

    //mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    //websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    //jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //test code lombok
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'


}

repositories {
    mavenCentral()
}

version = '0.0.1-SNAPSHOT'
description = 'test-docker-spring-boot'
group = 'com.test'

java.sourceCompatibility = JavaVersion.VERSION_17

jar {
    enabled = false
}

tasks.named('test') {
    useJUnitPlatform()
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jib {
    from {
        image = "openjdk:17"
        platform = "linux/amd64"
    }
    to {
        image = 'hwangjungseok/jib-feelko' // 이미지를 푸시할 Docker Hub 레지스트리의 URL을 지정합니다.
        tags = ['1.0'] // 이미지에 지정할 태그 이름을 지정합니다.
        platform = "linux/amd64"
    }
    container {
        entrypoint = ['java', '-Dspring.profiles.active=test', '-jar', 'test-docker-spring-boot-0.0.1-SNAPSHOT.jar'] // 컨테이너가 시작될 때 실행할 명령을 지정합니다.

        jvmFlags = ['-Xms512m', '-Xmx512m', '-Xdebug', '-XshowSettings:vm', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseContainerSupport'] // JVM 옵션을 설정합니다.
        ports = ['8080'] // 컨테이너가 오픈할 포트를 지정합니다.

        environment = [SPRING_OUTPUT_ANSI_ENABLED: 'ALWAYS'] // 컨테이너에 전달할 환경 변수를 지정합니다.
        labels = [version: project.version, name: project.name, group: project.group] // 이미지에 추가할 레이블을 지정합니다.

        creationTime = 'USE_CURRENT_TIMESTAMP' // 이미지의 생성 시간을 현재 시간으로 설정합니다.
        format = 'Docker' // 이미지의 포맷을 지정합니다.
    }
    extraDirectories {
        paths {
            path {
                from = file('build/libs') // 추가 디렉토리에서 파일을 추가할 경로를 지정합니다.
            }
        }
    }
}